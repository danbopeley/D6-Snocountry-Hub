<?php
/**
 * @name Sno Country Hub 
 * @category weather
 * @copyright 2010 Blue Tent Marketing
 * @author Daniel Bopeley <dan@bluetent.com> 
 * @package Sno Country
 * @version 1.2-beta
 *
 * The Sno Country Hub module serves as a central repository of daily skireport gather from the snocountyr service
 * 
 * @todo - Add a help section.
 * @todo - Add developer documentation.
 */

//Global Module Definitions.
define('SNOCOUNTRY_HUB_MODULE_PATH', drupal_get_path('module', 'snocountry_hub'));
//End User Configuration.
define ('SNOCOUNTRY_HUB_UTC_OFFSET', variable_get('snocountry_hub_utc_offset', 5));
//define ('SNOCOUNTRY_HUB_RESORT_STATES', variable_get('snocountry_hub_resort_states', 'ca'));
define ('SNOCOUNTRY_HUB_API_KEY', variable_get('snocountry_hub_api_key', ''));
/**
 * Implementation of hook_init().
 */
function snocountry_hub_init() {
  //Module Include Files when the module initializes.
  //Admin Files
  include_once(SNOCOUNTRY_HUB_MODULE_PATH .'/includes/admin.snocountry_hub.inc');
}

/**
 * Permissions for this module
 * @return array An array of valid permissions for the customweather module
 */
function snocountry_hub_perm(){
	return array( 'access content', 'administer site configuration');
} // function onthisdate_perm()

/**
 * Implementation of hook_menu().
 */
function snocountry_hub_menu(){

  $items = array();
  
  //Main menu.
  $items['admin/settings/snocountry-hub'] = array(
    'title'             => t('Sno Country'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('_snocountry_hub_main_settings'),
    'type'              => MENU_NORMAL_ITEM,
    'access arguments'  => array('administer site configuration'),
 
  );
  
  //Default local menu.
  $items['admin/settings/snocountry-hub/main'] = array(
    'title'             => t('Sno Country Configuration'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('_snocountry_hub_main_settings'),
    'type'              =>  MENU_DEFAULT_LOCAL_TASK,
    'access arguments'  => array('administer site configuration'),  
    'weight'            => -100,
  );
  
  //Module local tasks.
  $items['admin/settings/snocountry-hub/resort-list'] = array(
    'title'             => t('Resort List'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('_snocountry_hub_resort_settings'),
    'type'              => MENU_LOCAL_TASK,
    'access arguments'  => array('administer site configuration'),
    'weight'            => -99,
  );

  
  $items['snocountry-hub/update/all'] = array(
    'page callback'     => '_snocountry_hub_manual_update',
    'type'              => MENU_CALLBACK,
		'access arguments'  => array('administer site configuration'),
  );
  
  //manual update 
 	$items['snocountry-hub/update/resort'] = array(
    'title' => 'Update Resort',
    'page callback' => '_snocountry_hub_manual_update_resort',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  
 	$items['snocountry-hub/update/resort/%rid'] = array(
    'page callback' 		=> '_snocountry_hub_manual_update_resort',
    'page arguments' 		=> array(3),
    'access arguments'	=> array('access content'),
    'type' 							=> MENU_CALLBACK
  );	
  
 	$items['snocountry-hub/get-report'] = array(
    'title' => 'Resort Report',
    'page callback' => '_snocountry_hub_report_area',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['snocountry-hub/get-report/%rid/%days/%type'] = array(
    'title' 						=> 'Resort Report',
    'page callback' 		=> '_snocountry_hub_report_area',
    'page arguments' 		=> array(2,3,4),
    'access arguments'	=> array('access content'),
    'type' 							=> MENU_CALLBACK,
  );
  
 	$items['snocountry-hub/view-report'] = array(
    'title' => 'Resort Report',
    'page callback' => '_snocountry_hub_view_skireport_resort',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['snocountry-hub/view-report/%rid'] = array(
    'title' 						=> 'Resort Report',
    'page callback' 		=> '_snocountry_hub_view_skireport_resort',
    'page arguments' 		=> array(2),
    'access arguments'	=> array('access content'),
    'type' 							=> MENU_CALLBACK,
  );
  
  $items['snocountry-hub/manual-update'] = array(
    'title' => 'Resort Report',
    'page callback' => '_snocountry_hub_manual_update_resort',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['snocountry-hub/manual-update/%rid'] = array(
    'title' 						=> 'Resort Report',
    'page callback' 		=> '_snocountry_hub_manual_update_resort',
    'page arguments' 		=> array(2),
    'access arguments'	=> array('access content'),
    'type' 							=> MENU_CALLBACK,
  );	
			
  return $items;
}

/**
 * Implementation of hook_cron().
 */
function snocountry_hub_cron(){

	$selected_states = variable_get('snocountry_hub_resort_states', 'ca');

	foreach($selected_states as $state){
	
		$skireports = _snocountry_hub_get_skireport($state);
		if (sizeof($skireports) > 0)
		{
			
			foreach($skireports['items'] as $report){
				
				//grab resortid from report to pass to preceed function
				$rid = $report[ 'id' ];
				$rdt = $report[ 'reportDateTime' ];
				$rightnow =  time();
				$curday = date('j', $rightnow);
				$report_day = date('j', strtotime($rdt));
					
				//proceed with update if current reportDateTime different than reportDateTime last report
				$proceed = _snocountry_hub_getlastRDT($rid, $rdt);

				/*
				** if todays day is the same as this report's day then the report is NOT tardy
				*/
				if($curday == $report_day){
					$istardy = false;
				}else{
					$istardy = true;
				}
				
				/*
				** IF this rdt != last rdt 
				** AND 
				** the day specified in this reports rdt !=  current day (NOT TARDY or !=istardy)
				** THEN
				** go ahead with insert
				*/
				if($proceed && !$istardy){
					
					$sqlSki = "INSERT INTO {snocountry_hub_reports} (rid,resortName, state, reportDateTime, operatingStatus, resortType, newSnowMin, newSnowMax, primarySurfaceCondition, avgBaseDepthMin, avgBaseDepthMax, openDownHillTrails, openDownHillLifts, openDownHillMiles, openDownHillAcres, openDownHillPercent, nightSkiing, weekendHours, weekdayHours, snowComments, secondarySurfaceCondition, ParksNPipes, ts) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d)";						
									
					try {
					$skiResults = db_query($sqlSki, 
							$report[ 'id' ], 
							htmlentities($report[ 'resortName' ], ENT_QUOTES, 'UTF-8'), 
							$report[ 'state' ],
							$report[ 'reportDateTime' ],
							$report[ 'operatingStatus' ],
							$report[ 'resortType' ],			
							$report[ 'newSnowMin' ], 
							$report[ 'newSnowMax' ], 
							$report[ 'primarySurfaceCondition' ],
							$report[ 'avgBaseDepthMin' ], 
							$report[ 'avgBaseDepthMax' ], 
							$report[ 'openDownHillTrails' ], 
							$report[ 'openDownHillLifts' ], 
							$report[ 'openDownHillMiles' ], 
							$report[ 'openDownHillAcres' ], 
							$report[ 'openDownHillPercent' ],
							$report[ 'nightSkiing' ], 
							$report[ 'weekendHours' ], 
							$report[ 'weekdayHours' ], 
							$report[ 'snowComments' ],
							$report[ 'secondarySurfaceCondition' ],
							$report[ 'Parks-n-Pipes' ],
							$rightnow
						);
						
						watchdog('snocountry_hub', $report[ 'resortName' ].' updated (cron)', NULL, WATCHDOG_NOTICE, NULL);
					}
					catch(QueryException $exception) {	
						watchdog('snocountry_hub', $report[ 'resortName' ].' update failed (cron)', NULL, WATCHDOG_NOTICE, NULL);
					}	
				}
				else
				{
					if($istardy){
						watchdog('snocountry_hub', $report[ 'resortName' ].' was tardy (cron)', NULL, WATCHDOG_NOTICE, NULL);	
					}else{
						watchdog('snocountry_hub', $report[ 'resortName' ].' was current (cron)', NULL, WATCHDOG_NOTICE, NULL);
					}	
				}
			}
		}
	}
	watchdog('snocountry_hub', 'Sno Country Reports Cron Update Complete', NULL, WATCHDOG_NOTICE, NULL);		
}

/**
 * Manual Update
 */
function _snocountry_hub_manual_update(){

	$selected_states = variable_get('snocountry_hub_resort_states', 'ca');

	foreach($selected_states as $state){
	
		$skireports = _snocountry_hub_get_skireport($state);

		if (sizeof($skireports) > 0)
		{

			foreach($skireports['items'] as $report){
				
				//grab resortid and reportDateTime from report to pass to proceed function
				$rid = $report[ 'id' ];
				$rdt = $report[ 'reportDateTime' ];
				$rightnow =  time();
				$curday = date('j', $rightnow);
				$report_day = date('j', strtotime($rdt));
					
				//proceed with update if current reportDateTime different than reportDateTime last report
				$proceed = _snocountry_hub_getlastRDT($rid, $rdt);
				
				/*
				** if todays day is the same as this report's day then the report is NOT tardy
				*/
				if($curday == $report_day){
					$istardy = false;
				}else{
					$istardy = true;
				}
					
				if($proceed && !$istardy){

					$sqlSki = "INSERT INTO {snocountry_hub_reports} (rid, resortName, state, reportDateTime, operatingStatus, resortType, newSnowMin, newSnowMax, primarySurfaceCondition, avgBaseDepthMin, avgBaseDepthMax, openDownHillTrails, openDownHillLifts, openDownHillMiles, openDownHillAcres, openDownHillPercent, nightSkiing, weekendHours, weekdayHours, snowComments, secondarySurfaceCondition, ParksNPipes, ts) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d)";						
					
					try {
						$skiResults = db_query($sqlSki, 
								$report[ 'id' ], 
								htmlentities($report[ 'resortName' ], ENT_QUOTES, 'UTF-8'), 
								$report[ 'state' ],
								$report[ 'reportDateTime' ],
								$report[ 'operatingStatus' ],
								$report[ 'resortType' ],			
								$report[ 'newSnowMin' ], 
								$report[ 'newSnowMax' ], 
								$report[ 'primarySurfaceCondition' ],
								$report[ 'avgBaseDepthMin' ], 
								$report[ 'avgBaseDepthMax' ], 
								$report[ 'openDownHillTrails' ], 
								$report[ 'openDownHillLifts' ], 
								$report[ 'openDownHillMiles' ], 
								$report[ 'openDownHillAcres' ], 
								$report[ 'openDownHillPercent' ],
								$report[ 'nightSkiing' ], 
								$report[ 'weekendHours' ], 
								$report[ 'weekdayHours' ], 
								$report[ 'snowComments' ],
								$report[ 'secondarySurfaceCondition' ],
								$report[ 'Parks-n-Pipes' ],
								$rightnow
							);
							$querysuccess_message .= $report[ 'resortName' ].' - '.$report[ 'id' ]."<br>";
							watchdog('snocountry_hub', $report[ 'resortName' ].' updated (manual)', NULL, WATCHDOG_NOTICE, NULL);
						}
						catch(QueryException $exception) {
							$queryerror_message .= $report[ 'resortName' ].' - '.$report[ 'id' ]."<br>";
							watchdog('snocountry_hub', $report[ 'resortName' ].' update failed (manual)', NULL, WATCHDOG_NOTICE, NULL);
						}
						
				}
				else
				{
					if($istardy){
						$updatewastardy_message .= $report[ 'resortName' ].' - '.$report[ 'id' ]."<br>";
						watchdog('snocountry_hub', $report[ 'resortName' ].' was tardy (manual)', NULL, WATCHDOG_NOTICE, NULL);	
					}else{
						$updatewascurrent_message .= $report[ 'resortName' ].' - '.$report[ 'id' ]."<br>";
						watchdog('snocountry_hub', $report[ 'resortName' ].' was current (manual)', NULL, WATCHDOG_NOTICE, NULL);
					}						
				}
			}
		}
	}
	
	watchdog('snocountry_hub', 'Sno Country Manual Update Complete', NULL, WATCHDOG_NOTICE, NULL);
		
  if ($_GET['destination']) {
   	
    $MSG = t('<table><tr>
    <td valign="top">The following resorts were updated successfully:<br />'.$querysuccess_message.'</td>
    <td valign="top">The following resorts were current:<br />'.$updatewascurrent_message.'</td>
    <td valign="top">The following resorts were tardy:<br />'.$updatewastardy_message.'</td>
    <td valign="top">The following resorts attempted but failed to update:<br />'.$queryerror_message.'</td>
    </tr></table>');
    drupal_set_message($MSG);
    drupal_goto($_GET['destination']);
  }

}

/**
 * @name _snocountry_hub_get_skireport()
 * Makes an actual request to sno country for report data by state/province
 * @param string $st state or list of states/provinces to pull reports for.
 * Sno Country would prefer segemented requests and not request all states or regions at one time.
 * @return object 
 */
function _snocountry_hub_get_skireport($st){
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, "http://feeds.snocountry.com/conditions.php?apiKey=blue452.tent683&states=$st");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$results = curl_exec($ch);
		curl_close($ch);

		//echo 'JSON RESULT: ' .print_r($results,1); // debugging
		$skiobject = json_decode($results, true);
		
		return $skiobject;
}

/**
 * @name _snocountry_hub_manual_update_resort
 * Allows for manual updates applied to individual resorts
 * @param string $rid resortid to pull report for.
 * @return nothing 
 */
function _snocountry_hub_manual_update_resort($rid){

	$skireport = _snocountry_hub_get_skireport_resort($rid);
	if (sizeof($skireport) > 0){
		$report = $skireport['items'];

		$sqlSki = "INSERT INTO {snocountry_hub_reports} (rid, resortName, state, reportDateTime, operatingStatus, resortType, newSnowMin, newSnowMax, primarySurfaceCondition, avgBaseDepthMin, avgBaseDepthMax, openDownHillTrails, openDownHillLifts, openDownHillMiles, openDownHillAcres, openDownHillPercent, nightSkiing, weekendHours, weekdayHours, snowComments, secondarySurfaceCondition, ParksNPipes, ts) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d)";						
			
		try {
		$skiResults = db_query($sqlSki, 
				$report[0][ 'id' ], 
				htmlentities($report[0][ 'resortName' ], ENT_QUOTES, 'UTF-8'), 
				$report[0][ 'state' ],
				$report[0][ 'reportDateTime' ],
				$report[0][ 'operatingStatus' ],
				$report[0][ 'resortType' ],			
				$report[0][ 'newSnowMin' ], 
				$report[0][ 'newSnowMax' ], 
				$report[0][ 'primarySurfaceCondition' ],
				$report[0][ 'avgBaseDepthMin' ], 
				$report[0][ 'avgBaseDepthMax' ], 
				$report[0][ 'openDownHillTrails' ], 
				$report[0][ 'openDownHillLifts' ], 
				$report[0][ 'openDownHillMiles' ], 
				$report[0][ 'openDownHillAcres' ], 
				$report[0][ 'openDownHillPercent' ],
				$report[0][ 'nightSkiing' ], 
				$report[0][ 'weekendHours' ], 
				$report[0][ 'weekdayHours' ], 
				$report[0][ 'snowComments' ],
				$report[0][ 'secondarySurfaceCondition' ],
				$report[0][ 'Parks-n-Pipes' ],
				$rightnow
			);
			$querysuccess_message .= $report[ 'resortName' ].' - '.$report[ 'id' ]."<br>";
		}
		catch(QueryException $exception) {
				//$queryerror_message .= "Query Error\n".$exception->getMessage();
			$queryerror_message .= $report[ 'resortName' ].' - '.$report[ 'id' ]."<br>";
		}
	}
	watchdog('snocountry_hub', 'Sno Country Reports Manual Update', NULL, WATCHDOG_NOTICE, NULL);
  if ($_GET['destination']){
    $MSG = t('<table><tr><td valign="top">The following resort was manually updated successfully:<br />'.$querysuccess_message.'</td><td valign="top">The following resorts attempted but failed to update:<br />'.$queryerror_message.'</td></tr></table>');
    drupal_set_message($MSG);
    drupal_goto($_GET['destination']);
  }
}

/**
 * @name _snocountry_hub_get_skireport()
 * Makes an actual request to sno country for report for and individual resort
 * @param string $rid resortID to pull report for.
 * @return object 
 */
function _snocountry_hub_get_skireport_resort($rid){
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, "http://feeds.snocountry.com/conditions.php?apiKey=blue452.tent683&ids=$rid");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$results = curl_exec($ch);
		curl_close($ch);

		//echo 'JSON RESULT: ' .print_r($results,1); // debugging
		$skiobject = json_decode($results, true);
		
		return $skiobject;
}


/**
 * @name _snocountry_hub_report_area()
 * Menu Callback. generates report data for a particular area
 * for a particular numbers of days
 * in a particular format 
 * @param string $rid resort id to look up report for
 * @param int $days number of days to tally accumlated snow fall
 * @param type $rid format to return value in  xml or json
 * @return exit
 */
function _snocountry_hub_report_area($rid,$days=1,$type='xml'){
	
	$get_latest_report = db_query("SELECT * FROM {snocountry_hub_reports} WHERE  rid = '%s' ORDER BY ts DESC LIMIT 0,1", $rid);
	if($days > 1){
		
		$rightnow = time();
		$daysback = $rightnow - ($days * 86400);
		//$get_cumulative_snowfall = db_query("SELECT newSnowMin, newSnowMax FROM {snocountry_hub_reports} WHERE  rid = '%s' ORDER BY ts DESC LIMIT 0, %d", $rid, $days);
		//echo "daysback".$daysback;
		$get_cumulative_snowfall = db_query("SELECT reportDateTime, newSnowMin, newSnowMax, ts FROM {snocountry_hub_reports} WHERE  rid = '%s' AND ts > %d ORDER BY ts DESC", $rid, $daysback);
		
		if($get_cumulative_snowfall){
			$i = 0;
			$min = 0;
			$max = 0;
			$lastRDT = '';
			$lastDay = '';
			while($row = db_fetch_array($get_cumulative_snowfall)){
				$currentRDT = $row['reportDateTime'];
				$currentDay = date('j',$row['ts']);
				
				if(($lastRDT != $currentRDT) && ($lastDay != $currentDay)){		
					
				$min = (int)$row['newSnowMin'] + $min;
				$max = (int)$row['newSnowMax'] + $max;
				
				$cumulative_snowfall[$i]['min'] = $min;
				$cumulative_snowfall[$i]['max'] = $max;
				$lastRDT = $currentRDT;
				$lastDay = $currentDay;
				$i++;
				}
			}
		}
	}
	
	if($get_latest_report) // found last ski report so spit it out to page
	{
		if($type=='xml'){
			$mpath = drupal_get_path('module', 'snocountry_hub');
			$xml_output .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
			$xml_output .= "<?xml-stylesheet type=\"text/xsl\" href=\"http://ski.bluetent.com/snocountry.xsl\"?>\n"; 
			$xml_output .= "<skidata>\n";
			while($row = db_fetch_array($get_latest_report)){
				$xml_output .= "<report>\n";
	  		foreach ($row as $key => $value) {
	  			$value = trim($value);
	  			if(!$value){
	  				$value = 'na';
	  			}
	  			$xml_output .= "<$key>$value</$key>\n";
	  		}
	  		$xml_output .= "</report>\n";
			}
			if($cumulative_snowfall){
				$xml_output .= "<cumulativesnowfall>\n";
				foreach ($cumulative_snowfall as $dailysnow) {
					$min = $dailysnow['min'];
					$max = $dailysnow['max'];
					$xml_output .= "<daily>\n";
					$xml_output .= "<min>$min</min>\n";
					$xml_output .= "<max>$min</max>\n";
					$xml_output .= "</daily>\n";
				}
				$xml_output .= "</cumulativesnowfall>\n";	
			}
			$xml_output .= "</skidata>\n";
			
			echo $xml_output;  //output the goods
			
		}elseif($type=="json"){
			while($row = db_fetch_array($get_latest_report)){
				$json_output[] = $row;
			}
			if($cumulative_snowfall){
				$json_output[] = $cumulative_snowfall;
			}
			
			echo json_encode($json_output);  //output the goods
		}
	}
	exit;
}

function _snocountry_hub_getlastRDT($rid, $rdt){
	$result = db_query("SELECT reportDateTime FROM {snocountry_hub_reports} WHERE  rid = '%s' ORDER BY ts DESC LIMIT 1", $rid);
	
	if($result) // found last ski report so figure out if we need to update
	{
		$last_reportDateTime = db_result($result);
		if($last_reportDateTime == $rdt){			
			return false;			
		}else{			
			return true;		
		}	
	}else{	
		return false;	
	}
}

/**
 * @name _snocountry_hub_proceed()
 * Update flag. Ensures that the report for a particular rid (resort id) is only
 * updated once/day by checking the timestamp of the last report for a particular resort
 * then making sure that day of the month 'j' is different than the current day of the month
 * 
 * @param string $rid resort id used to look up last report timestamp
 * @return boolean
 */
function _snocountry_hub_proceed($rid){
	//set some dates and time flags
	$rightnow =  time();
	$curday = date('j', $rightnow); //numeric value of todays day of month
	$curhour = date('G', $rightnow);//numeric value of todays hour
	//get ts of last skireport update
	//$result = db_query("SELECT MAX(ts) FROM {snocountry_hub_reports} WHERE  rid = '%s'", $rid);
	
	$result = db_query("SELECT reportDateTime FROM {snocountry_hub_reports} WHERE  rid = '%s' ORDER BY ts DESC LIMIT 1", $rid);
	//$result = db_query( $sql );
	
	
	
	if($result) // found last ski report so figure out if we need to update
	{
		
		
		
		$last_reportDateTime = db_result($result);
		

		
		
		$last_day = date('j', strtotime($last_reportDateTime)); // set numeric value of day of month of last ski report
		
		
		if($last_day != $curday) //if after 5:00 am on day after last ski report then return true
		{
			
			$result2 = db_query("SELECT ts FROM {snocountry_hub_reports} WHERE  rid = '%s' ORDER BY ts DESC LIMIT 1", $rid);
			$last_reportTS = db_result($result2);
			$last_dayts = date('j', strtotime($last_reportTS)); // set numeric value of day of month of last ski report
			if($last_dayts != $curday) //if after 5:00 am on day after last ski report then return true
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else // last update was within last 24 hours so dont update
		{
			return false;
		}
	}
	else
	{
		return false; // problem with sql query so so dont update to be safe...try and get it next cron.
	}
}


/**
 * @name _snocountry_hub_validate_lastupdate
 * Manual Update flag for individual Reports. As Resorts are listed in admin looks to see if last report
 * for recorded for a particular resort 'reportDateTime is more that 18 hours prior to the current hour.
 * If greater than 18 hours the Report Date Time appends an update link to manually update the report for that resort. 
 * @param string $rid resort id used to look up last report timestamp
 * @return boolean
 */
function _snocountry_hub_validate_lastupdate($rid){
	
	$result = db_fetch_array(db_query("SELECT ts, reportDateTime FROM {snocountry_hub_reports} WHERE  rid = '%s' ORDER BY ts DESC LIMIT 1", $rid));

	$rdt=$result['reportDateTime'];
	//$set some vars
	$lastupdatefromresort_tstamp = strtotime($rdt);
	$lastupdatefromSCH = $result['ts'];
	$rightnow =  time();
	
	/* calculate the difference in sec between rightnow and when the last report update date as passed from snocountry
	*/
	$span = $rightnow - $lastupdatefromresort_tstamp;
	
	/* set var to carry day of month of when most recent report was stored in SCH database
	*/
	$lastupdatefromSCHday = date('j', $lastupdatefromSCH);
	/*set var to carry current day of month
	*/
	$dayofmonth = date('j', $rightnow);
	
	/*if $span is greater than 8 hours and the most recent report was stored on a differnet day than today then..
	the report has yet to update 
	*/
	if ($span > 64800 && $lastupdatefromSCHday != $dayofmonth){
	$attributes['class'] = 'update-sno-country';
  $attributes['query'] = drupal_get_destination();
		$rdt = $rdt.' - '.l('Needs Updated','snocountry-hub/update/resort/'.$rid, $attributes);
	}
	/*if $span is greater than 8 hours and the most recent report was stored on a differnet day than today then..
	the report has yet to update 
	*/
	else if ($span > 64800 && $lastupdatefromSCHday == $dayofmonth){
	$attributes['class'] = 'update-sno-country';
  $attributes['query'] = drupal_get_destination();
		$rdt = $rdt.' - <span style="color:#ff0000;">Tardy</span>';
	}
	else
	{
		$rdt = $rdt.' - <span style="color:#00ff00;">Current</span>';
	}
	
	$lastupdate['rdt'] = $rdt;
	$lastupdate['ts'] = $lastupdatefromSCH;
	
	return $lastupdate;
}


/**
 * @name _snocountry_hub_get_skireport()
 * Makes an actual request to sno country for report data by state/province
 * @param string $st state or list of states/provinces to pull reports for.
 * Sno Country would prefer segemented requests and not request all states or regions at one time.
 * @return object 
 */
function _snocountry_hub_view_skireport_resort($rid){
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, "http://feeds.snocountry.com/conditions.php?apiKey=blue452.tent683&ids=$rid");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$results = curl_exec($ch);
		curl_close($ch);

		//echo 'JSON RESULT: ' .print_r($results,1); // debugging
		$skiobject = json_decode($results, true);
		
		echo"<pre>";
		print_r($skiobject);
		echo"</pre>";
		exit;
		//return $skiobject;
}
?>